/*Data Type

Scalar Data Type (HOLDS SINGLE VALUE)    Composite Data Type(HOLDS MULTIPLE VALUE)                          Reference Data Type
int,number,binary_float, double           RECORD                                                            Cursors
varchar2,char,nvarchar                      type (hold some columns of a row)
raw                                         %rowtype(holds all columns in single row)
blob,clob,nclob                           COLLECTION
date                                        VARRAY - hold same data type elements, there is upper bound
timestamp                                   ASSOCIATE ARRAY
boolean                                     NESTED TABLE - holds same data type elements, no upper bound
                                    
*/

--SCALAR DATA TYPE - HOLDS ONLY ONE VALUE AT A TIME
SET SERVEROUTPUT ON
DECLARE
EMP_NAME VARCHAR2(30);
EMP_DEPT VARCHAR2(30);
BEGIN
SELECT DISTINCT EMP_NAME, DEPT_NAME
INTO EMP_NAME, EMP_DEPT
FROM EMPLOYEE WHERE EMP_ID = 101;
DBMS_OUTPUT.PUT_LINE('EMP NAME:- ' || EMP_NAME || ' EMP_DEPT:- ' || EMP_DEPT);
END;

--RECORD TYPE CAN HOLD ALL/SOME COLUMNS OF TABLE (DEFINE, DECLARE, INITIALIZE, ASSIGN, ACCESS)
SET SERVEROUTPUT ON
DECLARE
TYPE EMP_REC IS RECORD (EMP_NAME VARCHAR2(40),
                          DEPT_NAME VARCHAR2(40)); --DECLARE
V_EMP_REC EMP_REC;                                 --INITIALIZE                 
BEGIN
SELECT DISTINCT EMP_NAME, DEPT_NAME               --SELECT CLAUSE SHOULD BE MATCHING TO NUMBER OF COLUMNS DECLARED ABOVE   
INTO V_EMP_REC                                    --ASSIGN
FROM EMPLOYEE 
WHERE EMP_ID = 101;
DBMS_OUTPUT.PUT_LINE('EMP NAME:- ' || V_EMP_REC.EMP_NAME || ' AND EMP_DEPT:- ' || V_EMP_REC.DEPT_NAME); --ACCESS
END;
/

--DIFFERENCE BETWEEN %TYPE, TYPE
SET SERVEROUTPUT ON
DECLARE
TYPE EMP_REC IS RECORD (EMP_NAME EMPLOYEE.EMP_NAME%TYPE,			--NOTE TYPE, %TYPE KEYWORD
                          DEPT_NAME EMPLOYEE.DEPT_NAME%TYPE);
V_EMP_REC EMP_REC;                      
BEGIN
SELECT DISTINCT EMP_NAME, DEPT_NAME 
INTO V_EMP_REC
FROM EMPLOYEE 
WHERE EMP_ID = 101;
DBMS_OUTPUT.PUT_LINE('EMP NAME:- ' || V_EMP_REC.EMP_NAME || ' AND EMP_DEPT:- ' || V_EMP_REC.DEPT_NAME);
END;
/

--RECORD %ROWTYPE- HOLDS ALL COLUMNS OF ROWS
SET SERVEROUTPUT ON
DECLARE
V_EMP_REC EMPLOYEE%ROWTYPE; --RECORD
BEGIN
SELECT DISTINCT *
INTO V_EMP_REC
FROM EMPLOYEE 
WHERE EMP_ID = 101;
DBMS_OUTPUT.PUT_LINE('EMP NAME:- ' || V_EMP_REC.EMP_NAME || ' AND EMP_DEPT:- ' || V_EMP_REC.DEPT_NAME);
END;
/

--COLLECTION IS ORDERED GROUP OF LOGICALLY RELATED DATA
--VARRAY
SET SERVEROUTPUT ON
DECLARE
TYPE V_DAY_ARRAY IS VARRAY(7) OF VARCHAR2(30); --7 is upper bound
V_DAY V_DAY_ARRAY := V_DAY_ARRAY(NULL,NULL,NULL,NULL,NULL,NULL,NULL);                      
BEGIN
V_DAY(1) := 'MONDAY';
V_DAY(2) := 'TUESDAY';
V_DAY(3) := 'WEDNESDAY';
V_DAY(4) := 'THURSDAY';
V_DAY(5) := 'FRIDAY';
V_DAY(6) := 'SATURDAY';
V_DAY(7) := 'SUNDAY';
DBMS_OUTPUT.PUT_LINE('1ST DAY OF WEEK ' || V_DAY(1));
DBMS_OUTPUT.PUT_LINE('2ND DAY OF WEEK ' || V_DAY(2));
DBMS_OUTPUT.PUT_LINE('3RD DAY OF WEEK ' || V_DAY(3));
DBMS_OUTPUT.PUT_LINE('4TH DAY OF WEEK ' || V_DAY(4));
DBMS_OUTPUT.PUT_LINE('5TH DAY OF WEEK ' || V_DAY(5));
DBMS_OUTPUT.PUT_LINE('6TH DAY OF WEEK ' || V_DAY(6));
DBMS_OUTPUT.PUT_LINE('7TH DAY OF WEEK ' || V_DAY(7));
END;
/

--VARRAY EXCEPTIONS ORA-06533: Subscript beyond count(ASSIGNED A VALUE WITHOUT INITIALIZING)
SET SERVEROUTPUT ON
DECLARE
TYPE V_DAY_ARRAY IS VARRAY(7) OF VARCHAR2(30);
V_DAY V_DAY_ARRAY := V_DAY_ARRAY(NULL); --initialized only 1                      
BEGIN
V_DAY(1) := 'MONDAY';
V_DAY(2) := 'TUESDAY'; --THIS THROWS EXCEPTION ORA-06533: Subscript beyond count
DBMS_OUTPUT.PUT_LINE('1ST DAY OF WEEK ' || V_DAY(1));
DBMS_OUTPUT.PUT_LINE('2ND DAY OF WEEK ' || V_DAY(2));
END;
/

--solution to above
SET SERVEROUTPUT ON
DECLARE
TYPE V_DAY_ARRAY IS VARRAY(7) OF VARCHAR2(30);
V_DAY V_DAY_ARRAY := V_DAY_ARRAY(NULL); --initialized only 1                      
BEGIN
V_DAY(1) := 'MONDAY';
v_day.extend(); --Solution
V_DAY(2) := 'TUESDAY'; --THIS THROWS EXCEPTION SUBSCRIPT BEYOND COUNT as ASSIGNED A VALUE WITHOUT INITIALIZING
DBMS_OUTPUT.PUT_LINE('1ST DAY OF WEEK ' || V_DAY(1));
DBMS_OUTPUT.PUT_LINE('2ND DAY OF WEEK ' || V_DAY(2));
END;
/

SET SERVEROUTPUT ON
DECLARE
TYPE V_DAY_ARRAY IS VARRAY(7) OF VARCHAR2(30);
V_DAY V_DAY_ARRAY := V_DAY_ARRAY();     --NOT INITIALIZED                 
BEGIN
v_day.extend(2); --INITIALIZE FOR 2
V_DAY(1) := 'MONDAY';
V_DAY(2) := 'TUESDAY'; 
DBMS_OUTPUT.PUT_LINE('1ST DAY OF WEEK ' || V_DAY(1));
DBMS_OUTPUT.PUT_LINE('2ND DAY OF WEEK ' || V_DAY(2));
END;
/

--COLLECTION STATS, LIMIT, COUNT, NEXT, PRIOR, TRIM, DELETE
SET SERVEROUTPUT ON
DECLARE
TYPE V_DAY_ARRAY IS VARRAY(7) OF VARCHAR2(30);
V_DAY V_DAY_ARRAY := V_DAY_ARRAY();                      
BEGIN
V_DAY.EXTEND(2);
V_DAY(1) := 'MONDAY';
  V_DAY(2) := 'TUESDAY'; 
DBMS_OUTPUT.PUT_LINE('lIMIT OF VARRAY ' || V_DAY.LIMIT);
DBMS_OUTPUT.PUT_LINE('COUNT OF VARRAY ' || V_DAY.COUNT);
DBMS_OUTPUT.PUT_LINE('NEXT OF VARRAY(1) ' || V_DAY.NEXT(1));
DBMS_OUTPUT.PUT_LINE('PRIOD OF VARRAY(2) ' || V_DAY.PRIOR(2));
V_DAY.TRIM(); --DELETE LAST ELEMENT, BASED ON NUMBER N GIVEN CAN DELETE N ELEMENTS
DBMS_OUTPUT.PUT_LINE('AFTER TRIM OF VARRAY COUNT ' || V_DAY.COUNT);
V_DAY.DELETE(); --DELETES ALL
DBMS_OUTPUT.PUT_LINE('AFTER DELETE OF VARRAY COUNT ' || V_DAY.COUNT);
END;
/

--COLLECTION NESTED TABLE
SET SERVEROUTPUT ON
DECLARE
TYPE V_DAY_ARRAY IS TABLE OF VARCHAR2(30); --NO UPPER BOUND DEFINED LIKE VARRAY LINE 73
V_DAY V_DAY_ARRAY := V_DAY_ARRAY();                      
BEGIN
V_DAY.EXTEND(2);
V_DAY(1) := 'MONDAY';
V_DAY(2) := 'TUESDAY'; 
DBMS_OUTPUT.PUT_LINE('V_DAY(1) ' || V_DAY(1));
DBMS_OUTPUT.PUT_LINE('V_DAY(2) ' || V_DAY(2));
END;
/

--COLLECTION ASSOCIATE ARRAY --index DEFINED
SET SERVEROUTPUT ON
DECLARE
TYPE V_DAY_ARRAY IS TABLE OF VARCHAR2(30) INDEX BY VARCHAR2(3);
V_DAY V_DAY_ARRAY;                      
BEGIN
--V_DAY.EXTEND(2);
V_DAY('MON') := 'MONDAY';
V_DAY('TUE') := 'TUESDAY'; 
DBMS_OUTPUT.PUT_LINE('V_DAY(1) ' || V_DAY('MON'));
DBMS_OUTPUT.PUT_LINE('V_DAY(2) ' || V_DAY('TUE'));
END;
/
